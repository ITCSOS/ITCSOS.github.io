<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>觅知の博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-22T10:09:38.457Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>觅知</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>驾校科目一考试系统</title>
    <link href="http://example.com/2022/02/22/%E9%A1%B9%E7%9B%AE/%E9%A9%BE%E6%A0%A1%E7%A7%91%E7%9B%AE%E4%B8%80%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/02/22/%E9%A1%B9%E7%9B%AE/%E9%A9%BE%E6%A0%A1%E7%A7%91%E7%9B%AE%E4%B8%80%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-02-22T10:09:05.000Z</published>
    <updated>2022-02-22T10:09:38.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>计算机发展简史</title>
    <link href="http://example.com/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/"/>
    <id>http://example.com/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/</id>
    <published>2022-02-22T09:14:26.000Z</published>
    <updated>2022-02-22T10:05:23.063Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="计算机发展的四个阶段"><a href="#计算机发展的四个阶段" class="headerlink" title="计算机发展的四个阶段"></a>计算机发展的四个阶段</h3><p>1946-1957    <code>电子管计算机</code></p><p>集成度小，空间占用大，功耗高，运行速度慢，操作复杂，更换程序需要接线</p><p>1957-1964    <code>晶体管计算机</code></p><p>贝尔实验室的三个科学家发明，集成度较高，空间占用相对较小，功耗相对较低，运行速度相对较快，操作相对简单，交互更加方便</p><p>1964-1980    <code> 集成电路计算机</code></p><p>IC的发明，IBM，操作系统的原型</p><p>1980-现在    <code>现代大规模集成电路计算机</code></p><p>一个芯片集成了上百万的晶体管，速度更快，体积更小，价格更低，更能被大众接受，文本处理，表格处理。</p><p>未来：量子计算机</p><h3 id="微型计算机的发展"><a href="#微型计算机的发展" class="headerlink" title="微型计算机的发展"></a>微型计算机的发展</h3><p>单核 CPU  的规格        摩尔定律        多核CPU</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="计算机基础知识" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>c++基础</title>
    <link href="http://example.com/2022/02/22/%E9%9D%A2%E7%BB%8F/c++%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/02/22/%E9%9D%A2%E7%BB%8F/c++%E5%9F%BA%E7%A1%80/</id>
    <published>2022-02-22T00:49:02.000Z</published>
    <updated>2022-02-23T08:54:03.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、c和c-有什么区别？"><a href="#1、c和c-有什么区别？" class="headerlink" title="1、c和c++有什么区别？"></a>1、c和c++有什么区别？</h2><p>（1）c++是面向对象的语言，c语言是面向过程的语言</p><img src="https://pic1.zhimg.com/v2-90b9c9769ad06a2aed13e7dd2eec1d22_1440w.jpg?source=172ae18b" alt="img" style="zoom: 50%;"><p>（2）c++引入了new和delete运算符，取代了c中的malloc&#x2F;free库函数</p><p><img src="https://asterisk-pbx.ru/wiki/_media/blog/malloc-function-in-c.png" alt="img"></p><p>（3）c++引入引用的概念，而c中没有</p><p>（4）c++引入函数重载，c中 也没有</p><h2 id="2、假设有数组int-a-10-int-p-10-x3D-amp-a-其中的a和-amp-a有什么区别？"><a href="#2、假设有数组int-a-10-int-p-10-x3D-amp-a-其中的a和-amp-a有什么区别？" class="headerlink" title="2、假设有数组int a[10]; int (*p)[10] &#x3D; &amp;a;其中的a和&amp;a有什么区别？"></a>2、假设有数组int a[10]; int (*p)[10] &#x3D; &amp;a;其中的a和&amp;a有什么区别？</h2><p>a是数组名，是数组元素的首地址，+1表示地址值加上一个int类型的大小，如果a的值是0x00000001，加1操作后变为0x00000005，其中*（a+1）&#x3D;a[1];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>(*p)[<span class="number">10</span>] = &amp;a;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a&lt;&lt; endl; <span class="comment">// a:00BCF728       十进制：12384040</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a+1:&quot;</span> &lt;&lt; a + <span class="number">1</span> &lt;&lt; endl;<span class="comment">// a + 1 : 00BCF72C     十进制：12384044</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;a是数组的指针，其类型为int （*）[10] (就是前面提到的数组指针)，其加1时，系统就会以为是数组首地址加上整个数组的偏移（10个int型变量），值为数组a尾元素后一个元素的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>(*p)[<span class="number">10</span>] = &amp;a;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//与首地址之间相差10个int类型的元素  即将其转换为二进制十进制相差40</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p:&quot;</span> &lt;&lt;p&lt;&lt; endl;<span class="comment">//p:00F3FD54    16进制转换为10进制为15990100</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p+1:&quot;</span> &lt;&lt; p+<span class="number">1</span> &lt;&lt; endl;<span class="comment">//p+1:00F3FD7C  16进制转换为10进制为15990140  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若（int*）p,此时输出 *  p 时，其值为a[0]的值，因为被转换成int * 类型，解引用时按照int 类型的大小来读取</p><h2 id="3、static-关键字有什么作用"><a href="#3、static-关键字有什么作用" class="headerlink" title="3、static 关键字有什么作用?"></a>3、static 关键字有什么作用?</h2><p>static修饰局部变量时，使得该变量在静态区存储空间，只能在首次调用时进行初始化，之后的函数调用不再进行初始化，其生命周期也和程序相同，但作用域为局部作用域，并不能够一直被访问；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span>  <span class="type">int</span> x=<span class="number">1</span>;<span class="comment">//静态局部变量，占用内存单元值还会存储在空间内</span></span><br><span class="line">    x+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)s+=<span class="built_in">func</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s);<span class="comment">// x的值为6   s的值为21</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修饰全局变量时，使得该变量在静态存储区分配内存，在声明该变量的整个文件内都是可见的，而在文件外是不可见的</p><p>修饰函数时，在声明该变量的整个文件内都是可见的，而在文件外是不可见的，这种就避免了函数名相同造成的冲突</p><p>修饰成员变量时，所有的对象都只维持一分拷贝，可以实现不同对象间的数据分享，不需要实例化对象，不能在类内部初始化，一般在类外部初始化 ，并且初始化时不带static</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Static</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">printStaticvalude</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Staticvalude=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Static s;</span><br><span class="line"><span class="comment">//一定要添加作用域，否则访问不了私有数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Static::printStaticvalude</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.Staticvalude;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value:&quot;</span> &lt;&lt; Static:: <span class="built_in">printStaticvalude</span>() &lt;&lt; endl;<span class="comment">//使用类型访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value:&quot;</span> &lt;&lt; s.<span class="built_in">printStaticvalude</span>() &lt;&lt; endl;<span class="comment">//使用对象访问</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、-define-和const有什么区别？"><a href="#4、-define-和const有什么区别？" class="headerlink" title="4、#define 和const有什么区别？"></a>4、#define 和const有什么区别？</h2><h3 id="编译器处理方式不同："><a href="#编译器处理方式不同：" class="headerlink" title="编译器处理方式不同："></a>编译器处理方式不同：</h3><p><code>#define</code>宏是在预处理阶段展开，不能对宏定义进行测试，而<code>const</code>常量是在编译阶段使用，预处理器根据以#开头的命令，修改原始的程序。比如我们常见的#include &lt;stdio.h&gt;命令告诉处理器读取系统头文件stdio.h的内容，并把它直接插入程序文本中。咱们的#define也是，仅仅是单纯的文本替换，而const常量是编译运行阶段使用。</p><h3 id="类型和安全检查不同"><a href="#类型和安全检查不同" class="headerlink" title="类型和安全检查不同"></a>类型和安全检查不同</h3><p>define宏没有数据类型，不做任何类型检查，仅仅是展开。</p><p>const常量有具体的数据类型，在编译阶段会执行类型检查。</p><h3 id="存储方式不同"><a href="#存储方式不同" class="headerlink" title="存储方式不同"></a>存储方式不同</h3><p>define宏仅仅是展开，有多少地方使用，就展开多少次，不会分配内存。</p><p>const常量会在内存中分配(可以是堆中也可以是栈中)。</p><p>const  可以节省空间，避免不必要的内存分配。</p><p>例如： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">//常量宏  </span></span></span><br><span class="line"><span class="type">const</span> doulbe Pi=<span class="number">3.14159</span>; <span class="comment">//此时并未将Pi放入ROM中</span></span><br><span class="line"><span class="type">double</span> i=Pi; <span class="comment">//此时为Pi分配内存，以后不再分配！  </span></span><br><span class="line"><span class="type">double</span> I=PI; <span class="comment">//编译期间进行宏替换，分配内存  </span></span><br><span class="line"><span class="type">double</span> j=Pi; <span class="comment">//没有内存分配  </span></span><br><span class="line"><span class="type">double</span> J=PI; <span class="comment">//再进行宏替换，又一次分配内存！  </span></span><br></pre></td></tr></table></figure><p>const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是直接的数，所以，const定义的常量在程序运行过程中只有一份拷贝，而 #define定义的常量在内存中有若干个拷贝。 </p><h3 id="代码调试不同"><a href="#代码调试不同" class="headerlink" title="代码调试不同"></a>代码调试不同</h3><p>const常量可以进行调试的。</p><p>define是不能进行调试的，因为在预编译阶段就已经替换掉了。</p><h3 id="定义域不同"><a href="#定义域不同" class="headerlink" title="定义域不同"></a>定义域不同</h3><p>#define宏不受定义域限制，而const常量只在定义域内有效。</p><h2 id="const优点"><a href="#const优点" class="headerlink" title="const优点"></a>const优点</h2><p>const常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。</p><p>有些集成化的调试工具可以对const常量进行调试，但是不能对宏常量进行调试。</p><p>const可节省空间，避免不必要的内存分配，提高效率。</p><h2 id="define的优点"><a href="#define的优点" class="headerlink" title="#define的优点"></a>#define的优点</h2><p>宏可以定义一些函数，const不可以</p><p>宏可以使代更码简洁</p><p>使用宏可以方便代码维护</p><p>宏还可以定义带参数的宏，做到一定程度的泛型（利用#或者##操作符）</p><h2 id="5-对于频繁使用的短小函数，应该使用什么来实现？有什么优缺点？"><a href="#5-对于频繁使用的短小函数，应该使用什么来实现？有什么优缺点？" class="headerlink" title="5.对于频繁使用的短小函数，应该使用什么来实现？有什么优缺点？"></a>5.对于频繁使用的短小函数，应该使用什么来实现？有什么优缺点？</h2><p>应该使用inline内联函数，即编译器将inline内联函数内 的代码替换到函数被调用的地方，一般只适用于短小且无循环调用的函数</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>在内联函数被调用的地方进行代码展开，省去了函数调用的时间，提高了程序运行效率</p><p>相比宏函数，内联函数在代码展开时，编译器会进行语法的安全检查和数据类型的转换，使用更加安全</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>代码膨胀，产生更多的开销</p><p>如果内联函数内代码块的执行时间比调用时间长的多，那么效率提升的其实并没有那么大</p><p>如果修改内联函数，那么所有调用该函数的代码文件都将会被重新编译哦</p><p>内联函数只是声明，是否内联由编译器决定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="面经" scheme="http://example.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>杭州汇萃智能科技有限公司</title>
    <link href="http://example.com/2022/02/21/%E6%8B%9B%E8%81%98/%E6%9D%AD%E5%B7%9E%E6%B1%87%E8%90%83%E6%99%BA%E8%83%BD%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/"/>
    <id>http://example.com/2022/02/21/%E6%8B%9B%E8%81%98/%E6%9D%AD%E5%B7%9E%E6%B1%87%E8%90%83%E6%99%BA%E8%83%BD%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/</id>
    <published>2022-02-21T11:42:07.000Z</published>
    <updated>2022-02-21T11:51:54.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>五险一金</code> <code>补充医疗保险</code> <code>补充公积金</code> <code>员工旅游</code> <code>专业培训</code>  <code>绩效奖金</code> <code>年终奖金</code> <code>股票期权</code> <code>弹性工作</code> <code>定期体检</code></p><h3 id="岗位职责："><a href="#岗位职责：" class="headerlink" title="岗位职责："></a>岗位职责：</h3><p>1、基于Qt平台的软件应用开发和维护；</p><p>2、根据产品需要完成架构、模块设计、编码（测试代码）、部分测试工作；</p><p>3、能按照项目计划，按时提交高质量代码，完成开发任务；</p><p>4、部分文档的编写、维护。</p><h3 id="任职要求："><a href="#任职要求：" class="headerlink" title="任职要求："></a>任职要求：</h3><p>1、本科及以上学历，计算机相关专业；</p><p>2、熟悉<code>linux</code>系统，熟悉C&#x2F;C++语言及面向对象编程原理，熟悉<code>Qt/QtQuick</code>开发环境、Qt库；</p><p>3、有QT <code>QML </code>界面程序开发和系统架构搭建经验;，熟练运用QT开发库；</p><p>4、 熟悉<code>mysql</code>数据库 。</p><p>职能类别：<a href="https://jobs.51job.com/hangzhou-yhq/cyuyankaifa/">C&#x2F;C++开发工程师</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="招聘" scheme="http://example.com/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>对象的基本使用</title>
    <link href="http://example.com/2022/02/21/c++/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/21/c++/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-21T08:32:18.000Z</published>
    <updated>2022-02-22T07:59:04.172Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>类型是类型，对象是对象，有了类型才会有对应的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义一种&quot;人类&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有的</span></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//私有的</span></span><br><span class="line">    string name=<span class="string">&quot;xiaokenan&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Human human;<span class="comment">//这个就是我们创建的对象</span></span><br><span class="line"><span class="function">string <span class="title">Human::getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> human.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; human.<span class="built_in">getName</span>() &lt;&lt; endl;<span class="comment">//使用对象访问我们的数据，这样比较安全</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>计算机二级备考</title>
    <link href="http://example.com/2022/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E5%A4%87%E8%80%83/"/>
    <id>http://example.com/2022/02/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E5%A4%87%E8%80%83/</id>
    <published>2022-02-21T02:28:06.000Z</published>
    <updated>2022-02-23T08:00:48.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="001"><a href="#001" class="headerlink" title="001"></a>001</h4><p>1.在关系数据库设计中，关系模式是用来记录用户数据的<code>二维表</code>。</p><p>2.宏定义后边不加分号，逗号表达式的范围注意</p><p>3.在if else语句中else总是与离它最近的if配对。</p><p>4.看清楚选择题让选的是正确的还是错误的</p><h4 id="002"><a href="#002" class="headerlink" title="002"></a>002</h4><ol><li><p>计算机完成一条指令所花费的时间称为一个指令周期。</p></li><li><p>顺序结构不具有并发性。</p></li><li><p>为了降低算法的空间复杂度，主要应该减少输入数据所占用的内存空间，通常采用压缩存储技术。</p></li><li><p>栈是先进后出，队是先进先出</p></li><li><p>数的总节点数等于所有节点的度数之和加1</p></li><li><p>结构化程序设计强调的是程序的易读性。</p></li><li><p>数据库管理技术发展的三个阶段是人工管理系统，文件管理系统和数据库管理系统。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>c语言中的非执行语句不会被编译</p></li><li><p>c语言中八进制整型常量的开头是0，十六进制开头是0x，c语言中的实型常量必须要有小数点，指数形式以e后跟一个整数来表示以10为底的幂数，且规定e之前必须要有数字，且e后边的指数必须为整数。</p></li><li><p>pow函数按照左右顺序来写</p></li><li><p>取模运算符%，二元运算符，参与运算的都是整数</p></li><li><p>回车也是一个字符，所以它的值为123</p></li><li><p>c语言的逻辑运算符两边没有明确的数据类型，可以是任意合法的表达式</p></li><li><p>编译有错，if语句后边不能连加括号</p></li><li><p>由于内层循环for在后边直接跟了空语句，所以在循环内部什么都不做，只是打印一个*字</p></li><li><p>scanf(“%s”,s)表示输入一个字符串，遇到空格就会结束输入，所以当字符串带空格时，不能使用该语句</p></li><li><p>Auto 和register，在c语言中只有在使用的时候才会占用内存单元</p></li><li><p>结构体变量可以作为函数和返回值，作为函数的实参时，可以实现函数的传值调用，当使用结构体变量作为函数的形参时，实参应该是以实现形参的调用，形参将拷贝的副本传给形参，在被调用函数中改变形参的值对于调用函数中的实参没有影响</p></li><li><p>buffer:用于接收数据的内存地址，大小至少是size*count字节;size:单个元素的大小，单位是字节;count:元素的个数，每个元素是size字节;stream:输入流。</p></li></ol><h3 id="003"><a href="#003" class="headerlink" title="003"></a>003</h3><p>1.弄清入栈出栈的含义，s(1:50)的含义是，它的top的位置是自上往下依次增加，看位置，推个数</p><p>2.关系模式进行规范化的目的就是使关系结构更加合理，消除存储异常，使数据冗杂尽量小，便于插入，删除和更新等操作</p><p>3.关系元的使用，笛卡尔积</p><p>4.c语言中不能表示的数据进制是二进制</p><p>5.运算符的优先级</p><p>6.在输入多个数据时，若格式控制串中无非格式字符，则认为所有输入的字符均为有效字符。所以应按选项D的顺序输入数据。</p><p>7.c语言中没有&lt;&gt;运算符</p><p>8.循环条件的看清，都是double就用lf</p><p>9.格式输入函数，按照用户指定的格式从键盘上把数据输入到指定变量中，最大域宽。</p><p>10.a的ascii码值为97</p><p>11.函数调用时的传参问题，拷贝，不会修改变量的值</p><p>12.宏定义没有数据类型的限制</p><p>13.异或操作</p><p>14.文件操作注意数据的拷贝</p><h3 id="004"><a href="#004" class="headerlink" title="004"></a>004</h3><p>1.一个计算机当中有成千上万个文件，为了方便对文件进行存储和管理，计算机系统建立文件的索引，即文件名和文件物理之间的映射关系，这种文件的索引称为文件目录。</p><p>2.在长度为n的长度有序链表中，最坏的情况下需要比较的次数是n</p><p>3.循环队列当front&#x3D;rear时，此时队列为空</p><p>4.二叉树的遍历，前序遍历，中序遍历</p><p>5.变量还没有定义，就不能直接给变量赋值</p><p>6.使用y–一定是要先用再减</p><p>7.做选择题时先从前往后做15道，然后从后往前做15道</p><p>8.判断行数和列数，乘积要有倍数概念</p><p>9.注意循环条件，出了条件就不再循环</p><p>10.数组注意越界问题</p><p>11.数组名代替数组的首地址，定义数组时为其分配确定的地址</p><p>12.strlen函数计算长度时，不包括  \0    !!!</p><p>13.strcpy:字符串拷贝函数，strlen 求字符串长度函数</p><p>14.acsii码值的变化，注意整型可以被转换为字符型</p><p>15.被static修饰的变量为静态局部变量，占用固定的内存单元，下次被调用时就可以保留上次调用的值</p><p>16.getchar函数是从终端读入字符，不是从磁盘文件中读入字符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="计算机等级考试" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 源码项目</title>
    <link href="http://example.com/2022/02/21/%E5%89%AF%E4%B8%9A%E4%B9%8B%E8%B7%AF/GitHub%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/02/21/%E5%89%AF%E4%B8%9A%E4%B9%8B%E8%B7%AF/GitHub%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-02-21T01:44:47.000Z</published>
    <updated>2022-02-21T01:52:49.628Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2022年2月20日，付费参加了秦哥的“知识星球”，在这里开始了自己的第一个的副业项目。</p><h3 id="开通公众号运营权限"><a href="#开通公众号运营权限" class="headerlink" title="开通公众号运营权限"></a>开通公众号运营权限</h3><hr><p>1.秦哥给开通公众号运营权限：<code>Github源码</code></p><p>2.登录公众号后台分析现有粉丝数据</p><p>3.学习已有公众号文章的行文思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="副业之路" scheme="http://example.com/tags/%E5%89%AF%E4%B8%9A%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>类的使用</title>
    <link href="http://example.com/2022/02/20/c++/%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/20/c++/%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-20T12:19:41.000Z</published>
    <updated>2022-02-21T08:53:46.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h2><p>类是一种特殊的数据类型，不是一种具体的数据，它由我们自己设计成。</p><h2 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h2><p>设计一个类，首先需要考虑方法+数据，最主要的思想就是用方法访问数据。</p><h2 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义一种&quot;人类&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有的</span></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//私有的</span></span><br><span class="line">    string name=<span class="string">&quot;xiaokenan&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Human human;</span><br><span class="line"><span class="function">string <span class="title">Human::getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> human.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; human.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的思想</title>
    <link href="http://example.com/2022/02/20/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%80%9D%E6%83%B3/"/>
    <id>http://example.com/2022/02/20/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%80%9D%E6%83%B3/</id>
    <published>2022-02-20T12:07:10.000Z</published>
    <updated>2022-02-20T12:17:46.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h1><h2 id="1-什么是面向过程？"><a href="#1-什么是面向过程？" class="headerlink" title="1.什么是面向过程？"></a>1.什么是面向过程？</h2><p>根据程序的执行过程，来设计软件的所有细节。</p><h2 id="2-面向过程的缺点"><a href="#2-面向过程的缺点" class="headerlink" title="2.面向过程的缺点"></a>2.面向过程的缺点</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.开发大型项目时，越来越难把控，甚至失去控制。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.后期维护、更新成本很大。</span><br></pre></td></tr></table></figure><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h2><p>使用面向对象</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="1-什么是面向对象？"><a href="#1-什么是面向对象？" class="headerlink" title="1.什么是面向对象？"></a>1.什么是面向对象？</h2><p>面向对象是一种开发思想，一种全新的思维方式，开发大型项目就需要面向对象思想。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>字节</title>
    <link href="http://example.com/2022/02/20/%E6%8B%9B%E8%81%98/%E5%AD%97%E8%8A%82/"/>
    <id>http://example.com/2022/02/20/%E6%8B%9B%E8%81%98/%E5%AD%97%E8%8A%82/</id>
    <published>2022-02-20T11:30:22.000Z</published>
    <updated>2022-02-21T11:42:59.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>宇航今天给我发来了字节的内推链接，我于是就瞧了瞧，发现这字节招聘就是不简单啊！！！</p><p>下面是招聘的信息：</p><h2 id="职位描述"><a href="#职位描述" class="headerlink" title="职位描述"></a>职位描述</h2><p>团队介绍：字节跳动终端技术团队(Client Infrastructure)是大前端基础技术行业领军者，具有国际化研发团队（分别在北京、上海、杭州、深圳、广州、新加坡和美国山景城设有研发团队），负责整个字节跳动的大前端基础设施建设，提升公司全产品线的性能、稳定性和工程效率；支持的产品包括但不限于抖音、今日头条、西瓜视频、飞书、瓜瓜龙等，在移动端、Web、Desktop等各终端都有深入研究。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、参与字节跳动跨平台框架以及浏览器内核功能开发；</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2、参与浏览器内核的性能体验优化和底层新技术探索工作；</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3、参与跨平台渲染引擎的设计、研发与优化； </span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、参与<span class="keyword">JS </span>虚拟机性能优化。</span><br></pre></td></tr></table></figure><h2 id="职位要求"><a href="#职位要求" class="headerlink" title="职位要求"></a>职位要求</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>、<span class="number">2023</span>届获得本科及以上学历，计算机相关专业； </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2、热爱计算机科学和互联网技术，对移动产品有浓厚兴趣；</span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、具备扎实的数据结构和算法基础；精通至少一门编程语言，包括但不限于：<span class="variable">Java</span>、<span class="variable">Kotlin</span>，<span class="variable">Objective</span><span class="operator">-</span><span class="built_in">C</span>、<span class="variable">Swift</span>、<span class="built_in">C</span>、<span class="built_in">C</span><span class="operator">++</span>等； </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4、关注用户体验，能够积极把技术转化到用户体验改进上； </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5、对新技术保持热情，具备良好的分析、解决问题的能力。</span><br></pre></td></tr></table></figure><p>就从上面的招聘要求来看，咱别的不说，就先说说数据结构与算法吧，这玩意只能靠疯狂刷题来提高点对逻辑代码的熟悉程度，一个字：练，就行了。</p><p>而精通一门编程语言，这就难受了，孩子只学过c，c++，而这两门语言我哪敢说精通？</p><p>哈哈，咱废话少说，码代码去喽……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="招聘" scheme="http://example.com/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>备案流程</title>
    <link href="http://example.com/2022/02/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%A4%87%E6%A1%88%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/02/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%A4%87%E6%A1%88%E6%B5%81%E7%A8%8B/</id>
    <published>2022-02-19T10:40:09.000Z</published>
    <updated>2022-02-22T08:22:41.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几天我不是使用hexo和腾讯云服务器搭建了一个博客系统嘛，然后贼得意，就出去和朋友炫耀，结果就被泼了凉水，哈哈</p><p>什么原因呢？</p><p>人家说你这网站警告不安全，看别人的正规网站都是https安全域名加密访问，你这掉档次喽，当时啊，就想着好像有这么点道理，于是花了一下午的时间琢磨域名，一琢磨才发现国内的域名，尤其是在腾讯云，阿里云这些大公司注册的域名，都得经过备案才能使用，这不，刚搞完了域名，就申请备案，这备案也蛮烦的，折腾了我好长时间，不能让时间白花了呀，就顺便写篇文章记录一下呗！</p><p>不同备案类型的备案流程略有区别，以下是腾讯云的基本流程，仅供参考哈：</p><p><img src="https://main.qcloudimg.com/raw/755c9e36c85efe548b791d6fdd936388.png" alt="img"></p><ol><li><strong>验证备案域名</strong><br>输入您的备案域名，系统将根据您所填写的域名，自动识别您要办理的备案类型。 详情可查看 <a href="https://cloud.tencent.com/document/product/243/18905">备案域名</a>。</li><li><strong>填写备案资料</strong><br>根据系统提示填写相关的主体信息和网站信息，上传证件照片及核验单等备案材料。确认信息无误后，提交至腾讯云进行审核。详情可查看 <a href="https://cloud.tencent.com/document/product/243/18914">备案材料清单</a>。</li><li><strong>腾讯云审核</strong><br>腾讯云将在<strong>1 - 2个工作日左右</strong>完成备案资料审核，如审核通过，则将提交您的备案资料至当地管局进行审核。</li><li><strong>短信核验</strong><br>腾讯云将您的备案订单提交管局后，工信部系统会自动下发短信验证码，您需在24小时内，访问 <a href="https://beian.miit.gov.cn/">工信部备案管理系统</a> 进行验证，详情可查看 <a href="https://cloud.tencent.com/document/product/243/13435">备案短信核验说明</a>。</li><li><strong>管局审核</strong><br>根据《非经营性互联网信息服务备案管理办法》，管局审核时长<strong>不超过20个工作日</strong>。</li><li><strong>等待审核通过，备案完成</strong><br>审核通过以后，腾讯云会以短信和邮件的形式通知您。登录腾讯云系统可查看已备案的主体信息和备案网站信息。</li></ol><p>最后再说下，腾讯云的客户服务还挺不错的，尤其是客服小姐姐的声音，太好听啦，哈哈</p><p>不过有个坑，大家请注意，在域名备案期间，服务器是不能对外访问的，域名提交备案审核期间是不可以对外进行访问的，需要关闭网站进行备案，除了关闭默认的80端口外，还有其它几个端口也需要关闭。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="博客搭建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>人工智能之地形导航系统项目</title>
    <link href="http://example.com/2022/02/19/%E9%A1%B9%E7%9B%AE/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8B%E5%9C%B0%E5%BD%A2%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/02/19/%E9%A1%B9%E7%9B%AE/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8B%E5%9C%B0%E5%BD%A2%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-02-19T01:44:32.000Z</published>
    <updated>2022-02-21T03:12:00.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>2018 年 11月26日，”洞察“号火星探测器在火星上成功着陆，执行人类首次探究火星”内心深处“的任务，火星上地形比较难复杂，高低起伏，有山峰和低估，稍有不慎，就会引起”翻车“，所以我们必须要识别地形上的各个”峰点“和”谷点“，我们的项目就是分析地图数据，以确定地形中的峰点的数目和位置。</p><p><code>峰点</code>：一个周围所有的点的海拔都低于它的点</p><p><code>谷点</code>：一个周围所有的点的海拔都高于它的点</p><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="1-二维数组存储数据"><a href="#1-二维数组存储数据" class="headerlink" title="1.二维数组存储数据"></a>1.二维数组存储数据</h3><p>假设数据代表一个<code>N * N</code>的网格,数值最大的区域值即为<code>峰点</code>。</p><p>为了描述峰点的位置，我们需要使用一个位置方案:使用二维数组描述假定左上角是[O] [O],那么向下移动，则行号加1;向右移动，则列号加1，那么这些峰点的位置就可以描述为:[2] [1]  、 [2] [5]  、  [4] [3]  。<br>位置确定后，与周围4个邻节点比较即可确定峰点!（注:网格边界点缺乏4个相邻点不计算峰点)</p><p>地形数据保存于文件中，<code>map.txt</code>。</p><p><img src="https://img.jbzj.com/file_images/article/201804/20180403161238.jpg" alt="20180403161238.jpg"></p><h3 id="2-算法设计"><a href="#2-算法设计" class="headerlink" title="2.算法设计"></a>2.算法设计</h3><p>1)将地形数据从文件读入二维数组;<br>2)逐行遍历二维数组的每个元素，确定是否峰值并打印结果。</p><h3 id="3-项目代码实现"><a href="#3-项目代码实现" class="headerlink" title="3.项目代码实现"></a>3.项目代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> N 128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为峰值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPeak</span><span class="params">(<span class="type">const</span> <span class="type">double</span> grid[][N], <span class="type">int</span> r, <span class="type">int</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nrows, ncols;</span><br><span class="line"><span class="type">double</span> map[N][N];</span><br><span class="line"></span><br><span class="line">string filename;</span><br><span class="line">ifstream file;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入文件名:\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; filename;</span><br><span class="line"></span><br><span class="line">file.<span class="built_in">open</span>(filename.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file.<span class="built_in">fail</span>()) &#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;打开输入文件出错.\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file &gt;&gt; nrows &gt;&gt; ncols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nrows &gt; N || ncols &gt; N) &#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;网格太大，调整程序.\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nrows; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ncols; ++j) &#123;</span><br><span class="line">file &gt;&gt; map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nrows - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; ncols - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isPeak</span>(map, i, j)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;峰值出现在行：&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;列:&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPeak</span><span class="params">(<span class="type">const</span> <span class="type">double</span> grid[][N], <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((grid[i - <span class="number">1</span>][j] &lt; grid[i][j]) &amp;&amp;</span><br><span class="line">((grid[i + <span class="number">1</span>][j] &lt; grid[i][j])) &amp;&amp;</span><br><span class="line">((grid[i][j - <span class="number">1</span>] &lt; grid[i][j])) &amp;&amp;</span><br><span class="line">((grid[i][j + <span class="number">1</span>] &lt; grid[i][j])))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客的心酸</title>
    <link href="http://example.com/2022/02/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BF%83%E9%85%B8/"/>
    <id>http://example.com/2022/02/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BF%83%E9%85%B8/</id>
    <published>2022-02-15T02:56:37.000Z</published>
    <updated>2022-02-22T08:22:29.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo部署到centos服务器环境搭建过程"><a href="#hexo部署到centos服务器环境搭建过程" class="headerlink" title="hexo部署到centos服务器环境搭建过程"></a>hexo部署到centos服务器环境搭建过程</h1><h2 id="本文介绍将hexo部署到腾讯云的centos服务器上，同时也教大家如何避免踩坑，请大家耐心往下看。"><a href="#本文介绍将hexo部署到腾讯云的centos服务器上，同时也教大家如何避免踩坑，请大家耐心往下看。" class="headerlink" title="本文介绍将hexo部署到腾讯云的centos服务器上，同时也教大家如何避免踩坑，请大家耐心往下看。"></a>本文介绍将hexo部署到腾讯云的centos服务器上，同时也教大家如何避免踩坑，请大家耐心往下看。</h2><p><em>准备一台centos云服务器。</em></p><h2 id="搭建本地hexo服务"><a href="#搭建本地hexo服务" class="headerlink" title="搭建本地hexo服务"></a>搭建本地hexo服务</h2><p>因为这一块内容配置很简单，看着相关教程傻瓜式复制粘贴即可，在这里就不再多说了。</p><hr><h2 id="登录centos云服务器"><a href="#登录centos云服务器" class="headerlink" title="登录centos云服务器"></a>登录centos云服务器</h2><p><em>这里采用ssh远程登录</em></p><p>打开终端输入以下命令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@your_server_ip</span><br></pre></td></tr></table></figure><p><em>然后输入你的用户密码按下回车键就可以登进去了</em></p><p>这里是以默认端口号22进行访问，如果你的端口号改动了则可以加上 <em>-p</em> 参数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> username<span class="variable">@your_server_ip</span> -p 端口号</span><br></pre></td></tr></table></figure><hr><h2 id="安装并配置nginx环境"><a href="#安装并配置nginx环境" class="headerlink" title="安装并配置nginx环境"></a>安装并配置nginx环境</h2><ul><li><em>ssh 登录到服务器然后下载nginx</em></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><ul><li><strong>启动nginx并设置开机自启</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>至此，<em>现在浏览器输入外网地址就可以看到欢迎界面了</em></p><img src="https://i.loli.net/2020/01/28/bnkhfBmsu1Z7rEd.png" alt="查看源图像" style="zoom: 80%;"><ul><li><strong>配置nginx环境</strong></li></ul><p>*这里主要配置域名以及网站根目录，如果没有域名则可以暂时不配置，等购买域名并完成域名备案域名解析后再做配置,我是没有配置域名，太贵了，耗不起，哈哈</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><em>以下列出主要配置:</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  <span class="number">80</span>;</span><br><span class="line">    server_name     example.com; #改为自己的域名</span><br><span class="line">    root            /usr/share/nginx/blog; #改为自己博客的目录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>新建刚刚改的博客目录:</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/share/nginx/blog</span><br></pre></td></tr></table></figure><p>nginx配置到这里就基本安装Node.js啦。</p><hr><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul><li><strong>下载Nodejs</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v10<span class="number">.5</span><span class="number">.0</span>/node-v10<span class="number">.5</span><span class="number">.0</span>-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><ul><li><strong>解压Node.js</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvJf node-v10<span class="number">.5</span><span class="number">.0</span>-linux-x64.tar.xz</span><br><span class="line">mv node-v10<span class="number">.5</span><span class="number">.0</span>-linux-x64 node</span><br></pre></td></tr></table></figure><ul><li><strong>配置环境变量</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv node/ /usr/<span class="keyword">local</span>/</span><br><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p><em>增加以下内容:</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/usr/<span class="keyword">local</span>/node      #这里是node路径</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li><strong>更新配置</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><p><em>测试是否配置正确</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>到这里，我们的Node.js也配置好了</p><hr><h2 id="安装Git并进行配置"><a href="#安装Git并进行配置" class="headerlink" title="安装Git并进行配置"></a>安装Git并进行配置</h2><ul><li><strong>安装Git</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><ul><li><strong>创建git用户并为其设置密码</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser git #创建用户</span><br><span class="line">passwd git  #设置密码</span><br></pre></td></tr></table></figure><ul><li><strong>切换至git用户，添加SSH Key，</strong></li></ul><p><em>在客户端执行并查看并复制客户端的SSH Keys，将内容复制下，后边要用！！！</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>在服务器端执行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git  #切换用户</span><br><span class="line">mkdir ~/.ssh    #创建目录</span><br><span class="line">vim ~/.ssh/authorized_keys  #将刚刚复制的内容写进去 </span><br></pre></td></tr></table></figure><ul><li><strong>为刚刚的文件和目录设置权限</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">700</span> ~/.ssh</span><br></pre></td></tr></table></figure><ul><li><strong>在客户端测试是否能连接服务器</strong></li></ul><p><em>终端输入以下命令，如果成功登录则配置成功。</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@your_server_ip #注意更换成自己的服务器ip</span><br></pre></td></tr></table></figure><ul><li><strong>将博客发布目录的属主属组改为git</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /usr/share/nginx/blog</span><br></pre></td></tr></table></figure><ul><li><strong>初始化Git仓库</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">cd ~</span><br><span class="line">git init <span class="comment">--bare blog.git    #使用--bare参数，Git就会创建一个空裸库。</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置git hooks</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p><em>在post-receive中写入以下内容:</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git <span class="comment">--work-tree=/usr/share/nginx/blog --git-dir=/home/git/blog.git checkout -f</span></span><br></pre></td></tr></table></figure><p>赋予其执行权限</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~/blog.git/hooks/post-rceive</span><br></pre></td></tr></table></figure><h2 id="配置博客根目录的主配置文件"><a href="#配置博客根目录的主配置文件" class="headerlink" title="配置博客根目录的主配置文件"></a>配置博客根目录的主配置文件</h2><p>手动编辑博客根目录下的_config.yml</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@your_server_ip:/home/git/blog.git #注意改成自己的服务器ip</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>在博客主目录执行以下命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署完成后就可以在浏览器输入你的域名访问我们的博客了。</p><h1 id="坑总结："><a href="#坑总结：" class="headerlink" title="坑总结："></a>坑总结：</h1><h3 id="1-x11-forwarding-disabled解决办法："><a href="#1-x11-forwarding-disabled解决办法：" class="headerlink" title="1. x11-forwarding disabled解决办法："></a>1. x11-forwarding disabled解决办法：</h3><p><a href="https://blog.csdn.net/qq_35061334/article/details/102575507">(37条消息) x11-forwarding disabled解决办法_3L_csdn的博客-CSDN博客</a></p><h3 id="2-Add-correct-host-key-in-CUsersxxx-sshknown-hosts-to-get-rid-of-this-message"><a href="#2-Add-correct-host-key-in-CUsersxxx-sshknown-hosts-to-get-rid-of-this-message" class="headerlink" title="2.  Add correct host key in CUsersxxx.sshknown_hosts to get rid of this message"></a>2.  Add correct host key in CUsersxxx.sshknown_hosts to get rid of this message</h3><p><a href="https://blog.csdn.net/qq_26552691/article/details/116270842">(37条消息) Add correct host key in C:\Users\xxx&#x2F;.ssh&#x2F;known_hosts to get rid of this message._奔三的Uncle-CSDN博客</a></p><p>如果上边的操作不行，就去清空后本地文件<code>C:\Users\Administrator\.ssh</code>下的known_hosts文件，这下问题就可以完美解决。</p><h3 id="3-ssh登录错误ECDSA-host-key-for-ip-has-changed解决方案"><a href="#3-ssh登录错误ECDSA-host-key-for-ip-has-changed解决方案" class="headerlink" title="3. ssh登录错误ECDSA host key for ip has changed解决方案"></a>3. ssh登录错误ECDSA host key for ip has changed解决方案</h3><p><a href="https://www.jianshu.com/p/e30486c20cf5">ssh登录错误ECDSA host key for ip has changed解决方案 - 简书 (jianshu.com)</a></p><h3 id="4-重启centOS丢失nginx-pid导致无法启动nginx的解决方法"><a href="#4-重启centOS丢失nginx-pid导致无法启动nginx的解决方法" class="headerlink" title="4.  重启centOS丢失nginx.pid导致无法启动nginx的解决方法"></a>4.  重启centOS丢失nginx.pid导致无法启动nginx的解决方法</h3><p><a href="https://blog.csdn.net/weixin_30888707/article/details/97296313">(37条消息) 重启centOS丢失nginx.pid导致无法启动nginx的解决方法_weixin_30888707的博客-CSDN博客</a></p><p>至此，我的博客就彻底搭建完成了，有种哭的欲望，哈哈！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="博客搭建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
